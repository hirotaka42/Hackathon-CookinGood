{"ast":null,"code":"var _jsxFileName = \"/Users/user/src/github.com/hirotaka42/Hackathon-CookinGood/src/routes/timer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const renderTime = ({ remainingTime }: { remainingTime: number }) => {\n//     if (remainingTime === 0) {\n//         return <div>Time's up!</div>;\n//     }\n\n//     return (\n//         <div className=\"timer\">\n//             <div className=\"value\">{remainingTime}</div>\n//         </div>\n//     );\n// };\n\nconst renderTime = _ref => {\n  _s();\n  let {\n    remainingTime\n  } = _ref;\n  const currentTime = useRef(remainingTime);\n  const prevTime = useRef(null);\n  const isNewTimeFirstTick = useRef(false);\n  const [, setOneLastRerender] = useState(0);\n  if (currentTime.current !== remainingTime) {\n    isNewTimeFirstTick.current = true;\n    prevTime.current = currentTime.current;\n    currentTime.current = remainingTime;\n  } else {\n    isNewTimeFirstTick.current = false;\n  }\n\n  // force one last re-render when the time is over to tirgger the last animation\n  if (remainingTime === 0) {\n    setTimeout(() => {\n      setOneLastRerender(val => val + 1);\n    }, 20);\n  }\n  const isTimeUp = isNewTimeFirstTick.current;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `time ${isTimeUp ? \"up\" : \"\"}`,\n      children: remainingTime\n    }, remainingTime, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), prevTime.current !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `time ${!isTimeUp ? \"down\" : \"\"}`,\n      children: prevTime.current\n    }, prevTime.current, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(renderTime, \"snYL9PGsXbRKmeF8yyEL1YKiHHg=\");\nconst Timer = _ref2 => {\n  let {\n    duration,\n    shouldRepeat,\n    delay\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timer-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"CookingTimer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CountdownCircleTimer, {\n      isPlaying: true,\n      duration: duration,\n      colors: ['#004777', '#F7B801', '#A30000', '#A30000'],\n      colorsTime: [10, 6, 3, 0],\n      onComplete: () => ({\n        shouldRepeat,\n        delay\n      }),\n      children: renderTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useRef","useState","CountdownCircleTimer","renderTime","remainingTime","currentTime","prevTime","isNewTimeFirstTick","setOneLastRerender","current","setTimeout","val","isTimeUp","Timer","duration","shouldRepeat","delay"],"sources":["/Users/user/src/github.com/hirotaka42/Hackathon-CookinGood/src/routes/timer.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { CountdownCircleTimer } from 'react-countdown-circle-timer';\n\ntype Props = {\n    remainingTime: number;\n    duration: number;\n    shouldRepeat: boolean;\n    delay: number;\n\n};\n\n// const renderTime = ({ remainingTime }: { remainingTime: number }) => {\n//     if (remainingTime === 0) {\n//         return <div>Time's up!</div>;\n//     }\n\n//     return (\n//         <div className=\"timer\">\n//             <div className=\"value\">{remainingTime}</div>\n//         </div>\n//     );\n// };\n\nconst renderTime: React.FC<Props> = ({ remainingTime }) => {\n    const currentTime = useRef(remainingTime);\n    const prevTime = useRef<number | null>(null);\n    const isNewTimeFirstTick = useRef(false);\n    const [, setOneLastRerender] = useState(0);\n\n    if (currentTime.current !== remainingTime) {\n        isNewTimeFirstTick.current = true;\n        prevTime.current = currentTime.current;\n        currentTime.current = remainingTime;\n    } else {\n        isNewTimeFirstTick.current = false;\n    }\n\n    // force one last re-render when the time is over to tirgger the last animation\n    if (remainingTime === 0) {\n        setTimeout(() => {\n            setOneLastRerender((val) => val + 1);\n        }, 20);\n    }\n\n    const isTimeUp = isNewTimeFirstTick.current;\n\n    return (\n        <div className=\"time-wrapper\">\n            <div key={remainingTime} className={`time ${isTimeUp ? \"up\" : \"\"}`}>\n                {remainingTime}\n            </div>\n            {prevTime.current !== null && (\n                <div\n                    key={prevTime.current}\n                    className={`time ${!isTimeUp ? \"down\" : \"\"}`}\n                >\n                    {prevTime.current}\n                </div>\n            )}\n        </div>\n    );\n};\n\n\n\nconst Timer: React.FC<Props> = ({ duration, shouldRepeat, delay }) => {\n    return (\n        <div className='timer-wrapper'>\n            <h2>CookingTimer</h2>\n            <CountdownCircleTimer\n                isPlaying\n                duration={duration}\n                colors={['#004777', '#F7B801', '#A30000', '#A30000']}\n                colorsTime={[10, 6, 3, 0]}\n                onComplete={() => ({ shouldRepeat, delay })}\n            >\n                {renderTime}\n            </CountdownCircleTimer>\n        </div >\n    );\n};\n\nexport default Timer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,oBAAoB,QAAQ,8BAA8B;AAAC;AAUpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAA2B,GAAG,QAAuB;EAAA;EAAA,IAAtB;IAAEC;EAAc,CAAC;EAClD,MAAMC,WAAW,GAAGL,MAAM,CAACI,aAAa,CAAC;EACzC,MAAME,QAAQ,GAAGN,MAAM,CAAgB,IAAI,CAAC;EAC5C,MAAMO,kBAAkB,GAAGP,MAAM,CAAC,KAAK,CAAC;EACxC,MAAM,GAAGQ,kBAAkB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAE1C,IAAII,WAAW,CAACI,OAAO,KAAKL,aAAa,EAAE;IACvCG,kBAAkB,CAACE,OAAO,GAAG,IAAI;IACjCH,QAAQ,CAACG,OAAO,GAAGJ,WAAW,CAACI,OAAO;IACtCJ,WAAW,CAACI,OAAO,GAAGL,aAAa;EACvC,CAAC,MAAM;IACHG,kBAAkB,CAACE,OAAO,GAAG,KAAK;EACtC;;EAEA;EACA,IAAIL,aAAa,KAAK,CAAC,EAAE;IACrBM,UAAU,CAAC,MAAM;MACbF,kBAAkB,CAAEG,GAAG,IAAKA,GAAG,GAAG,CAAC,CAAC;IACxC,CAAC,EAAE,EAAE,CAAC;EACV;EAEA,MAAMC,QAAQ,GAAGL,kBAAkB,CAACE,OAAO;EAE3C,oBACI;IAAK,SAAS,EAAC,cAAc;IAAA,wBACzB;MAAyB,SAAS,EAAG,QAAOG,QAAQ,GAAG,IAAI,GAAG,EAAG,EAAE;MAAA,UAC9DR;IAAa,GADRA,aAAa;MAAA;MAAA;MAAA;IAAA,QAEjB,EACLE,QAAQ,CAACG,OAAO,KAAK,IAAI,iBACtB;MAEI,SAAS,EAAG,QAAO,CAACG,QAAQ,GAAG,MAAM,GAAG,EAAG,EAAE;MAAA,UAE5CN,QAAQ,CAACG;IAAO,GAHZH,QAAQ,CAACG,OAAO;MAAA;MAAA;MAAA;IAAA,QAK5B;EAAA;IAAA;IAAA;IAAA;EAAA,QACC;AAEd,CAAC;AAAC,GAtCIN,UAA2B;AA0CjC,MAAMU,KAAsB,GAAG,SAAuC;EAAA,IAAtC;IAAEC,QAAQ;IAAEC,YAAY;IAAEC;EAAM,CAAC;EAC7D,oBACI;IAAK,SAAS,EAAC,eAAe;IAAA,wBAC1B;MAAA,UAAI;IAAY;MAAA;MAAA;MAAA;IAAA,QAAK,eACrB,QAAC,oBAAoB;MACjB,SAAS;MACT,QAAQ,EAAEF,QAAS;MACnB,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAE;MACrD,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;MAC1B,UAAU,EAAE,OAAO;QAAEC,YAAY;QAAEC;MAAM,CAAC,CAAE;MAAA,UAE3Cb;IAAU;MAAA;MAAA;MAAA;IAAA,QACQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACpB;AAEf,CAAC;AAAC,KAfIU,KAAsB;AAiB5B,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}